#! /usr/bin/env python

# ==========================================================================================================================================================
#  Copyright 2021 Carnegie Mellon University.
#
#  NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
#  BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
#  INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
#  FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
#  FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT. Released under a BSD (SEI)-style license, please see license.txt
#  or contact permission@sei.cmu.edu for full terms.
#
#  [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
#  Copyright notice for non-US Government use and distribution.
#
#  This Software includes and/or makes use of the following Third-Party Software subject to its own license:
#  1. Pytorch (https://github.com/pytorch/pytorch/blob/master/LICENSE) Copyright 2016 facebook, inc..
#  2. NumPY (https://github.com/numpy/numpy/blob/master/LICENSE.txt) Copyright 2020 Numpy developers.
#  3. Matplotlib (https://matplotlib.org/3.1.1/users/license.html) Copyright 2013 Matplotlib Development Team.
#  4. pillow (https://github.com/python-pillow/Pillow/blob/master/LICENSE) Copyright 2020 Alex Clark and contributors.
#  5. SKlearn (https://github.com/scikit-learn/sklearn-docbuilder/blob/master/LICENSE) Copyright 2013 scikit-learn
#      developers.
#  6. torchsummary (https://github.com/TylerYep/torch-summary/blob/master/LICENSE) Copyright 2020 Tyler Yep.
#  7. adversarial robust toolbox (https://github.com/Trusted-AI/adversarial-robustness-toolbox/blob/main/LICENSE)
#      Copyright 2018 the adversarial robustness toolbox authors.
#  8. pytest (https://docs.pytest.org/en/stable/license.html) Copyright 2020 Holger Krekel and others.
#  9. pylint (https://github.com/PyCQA/pylint/blob/master/COPYING) Copyright 1991 Free Software Foundation, Inc..
#  10. python (https://docs.python.org/3/license.html#psf-license) Copyright 2001 python software foundation.
#
#  DM20-1149
#
# ==========================================================================================================================================================

import argparse
import json
import logging
from argparse import RawDescriptionHelpFormatter

import juneberry.data
import juneberry.filesystem as jbfs
from juneberry.config.dataset import DatasetConfig
from juneberry.config.training import TrainingConfig


def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')

    parser = argparse.ArgumentParser(description="Takes the provided data set config (or training config with -t), "
                                                 "and outputs the list of files that will be provided to "
                                                 "training.  If -t is specified a training config should be provided "
                                                 "and the validation split will also be done.",
                                     formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("dataRoot", help="Root of data directory")
    parser.add_argument("config", help='Name/path of config file. Data config OR train config')
    parser.add_argument('-o', "--output", default="file_list_preview.csv", help="Name of output file.")
    parser.add_argument('-t', '--training', default=False, action='store_true',
                        help="Set to true to consume training json files that specify validation split.")
    parser.add_argument('--version', default="",
                        help='Optional parameter used to control which version of a data set to use.')

    args = parser.parse_args()

    if args.training:
        # We expect TRAIN config
        with open(args.config) as train_json:
            t_config = json.load(train_json)
            with open(t_config['dataSetConfigPath']) as ds_json:
                ds_config = json.load(ds_json)

        # Set up a Data Manager
        data_manager = jbfs.DataManager(ds_config, args.version)

        # Convert config dictionaries to config objects
        train_config = TrainingConfig(None, t_config)
        dataset_config = DatasetConfig(ds_config)

        # get the files from the data set config
        file_list, val_list = juneberry.data.generate_image_list(args.dataRoot, dataset_config, train_config,
                                                                 data_manager)

        with open(args.output, 'w') as out_file:
            print("TRAIN")
            out_file.write(f"type,path,label\n")
            for k, v in file_list:
                out_file.write(f"train,{k},{v}\n")
            print("VALIDATION")
            for k, v in val_list:
                out_file.write(f"validation,{k},{v}\n")

    else:
        # We expect DATA SET config
        with open(args.config) as json_file:
            ds_config = json.load(json_file)

        # Set up a Data Manager
        data_manager = jbfs.DataManager(ds_config, args.version)

        # Convert from config dictionary to config object
        dataset_config = DatasetConfig(ds_config)

        file_list, vf = juneberry.data.generate_image_list(args.dataRoot, dataset_config, None, data_manager)
        with open(args.output, 'w') as out_file:
            out_file.write(f"type,path,label\n")
            for k, v in file_list:
                out_file.write(f"train,{k},{v}\n")


if __name__ == "__main__":
    main()
